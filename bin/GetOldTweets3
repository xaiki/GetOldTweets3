#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""To use this script you can pass the following attributes:
       --querysearch: a query text to be matched
          --username: a username or a list of usernames (comma or space separated)
                      of a specific twitter account(s) (with or without @)
--username-from-file: a file with a list of usernames,
             --since: a lower bound date in UTC (yyyy-mm-dd)
             --until: an upper bound date in UTC (yyyy-mm-dd) (not included)
              --near: a reference location area from where tweets were generated
            --within: a distance radius from "near" location (e.g. 15mi)
         --toptweets: only the tweets provided as top tweets by Twitter (no parameters required)
         --maxtweets: the maximum number of tweets to retrieve
              --lang: the language of tweets
             --emoji: "ignore" (the default, discards emojis), "unicode"
                      or "named" (replaces with "Emoji[Name of emoji]")
            --output: a filename to export the results (default is "output_got.csv")
             --debug: outputs debug information to standard error stream

Examples:

# Example 1 - Get tweets by query search:
GetOldTweets3 --querysearch "europe refugees" --maxtweets 10

# Example 1 - Get the last 10 top tweets by username:
GetOldTweets3 --username "barackobama" --toptweets --maxtweets 10

# Example 3 - Get tweets by username and bound dates (until date is not included) and preserve emojis as unicode:
GetOldTweets3 --username "barackobama" --since 2015-09-10 --until 2015-09-12 --maxtweets 10 --emoji unicode

# Example 4 - Get tweets by several usernames:
GetOldTweets3 --username "BarackObama,AngelaMerkeICDU" --usernames-from-file userlist.txt --maxtweets 10

# Example 5 - Get tweets by language:
GetOldTweets3 --querysearch "bitcoin" --lang cn --maxtweets 10 

# Example 6 - Get tweets by place:
GetOldTweets3 --querysearch "bitcoin" --near "Berlin, Germany" --within 25km --maxtweets 10 

# Example 7 - Get tweets by geo coordinates:
GetOldTweets3 --querysearch "museum" --near "55.75, 37.61" --within 40km --maxtweets 10 
"""

import os, sys, re, getopt
import traceback

if sys.version_info[0] < 3:
    raise Exception("Python 2.x is not supported. Please upgrade to 3.x")

import GetOldTweets3 as got


def concatenate_concurrent_files(collected_directory, outputFileName):
    from os import listdir
    from os.path import isfile, join
    file_paths = [collected_directory + "/" + f for f in listdir(collected_directory) if isfile(join(collected_directory, f))]

    with open(outputFileName, "w+", encoding="utf8") as total_result_file:
        total_result_file.write('date,username,to,replies,retweets,favorites,text,geo,mentions,hashtags,id,permalink\n')
        for file_path in reversed(file_paths):
            with open(file_path, "r", encoding="utf8") as file:
                data = file.read().split("\n", 1)[1]
                total_result_file.write(data)
            os.remove(file_path)
    os.removedirs(collected_directory)




def main(argv):
    if len(argv) == 0:
        print('You must pass some parameters. Use \"-h\" to help.')
        return

    if len(argv) == 1 and argv[0] == '-h':
        print(__doc__)
        return

    try:
        opts, args = getopt.getopt(argv, "", ("querysearch=",
                                              "username=",
                                              "usernames-from-file=",
                                              "since=",
                                              "until=",
                                              "near=",
                                              "within=",
                                              "toptweets",
                                              "maxtweets=",
                                              "lang=",
                                              "output=",
                                              "debug",
                                              "workers=",
                                              "forcemaxtweets",
                                              "emoji=",
                                              "debug"))

        tweetCriteria = got.manager.TweetCriteria()
        outputFileName = "output_got.csv"
        outputDirNameConcurrent = "output_got.csv_collected"
        outputFileNameConcurrent = "{}_to_{}.csv"

        debug = False
        force_max_tweets = False
        workers = 1
        usernames = set()
        username_files = set()
        for opt, arg in opts:
            if opt == '--querysearch':
                tweetCriteria.querySearch = arg

            elif opt == '--username':
                usernames_ = [u.lstrip('@') for u in re.split(r'[\s,]+', arg) if u]
                usernames_ = [u.lower() for u in usernames_ if u]
                usernames |= set(usernames_)

            elif opt == '--usernames-from-file':
                username_files.add(arg)

            elif opt == '--since':
                tweetCriteria.since = arg

            elif opt == '--until':
                tweetCriteria.until = arg

            elif opt == '--near':
                geocode = arg.split(',')
                try:
                    if len(geocode) != 2:
                        raise
                    lat, lon = geocode[0].strip(), geocode[1].strip()
                    if lat[-1].lower() == 'n':
                        lat = float(lat[:-1])
                    elif lat[-1].lower() == 's':
                        lat = -float(lat[:-1])
                    else:
                        lat = float(lat)

                    if lon[-1].lower() == 'e':
                        lon = float(lon[:-1])
                    elif lon[-1].lower() == 'w':
                        lon = -float(lon[:-1])
                    else:
                        lon = float(lon)
                    if lat < -180 or lat > 180:
                        raise
                    if lon < -90 or lon > 90:
                        raise
                    tweetCriteria.lat = lat
                    tweetCriteria.lon = lon
                except:
                    tweetCriteria.near = arg

            elif opt == '--within':
                tweetCriteria.within = arg

            elif opt == '--toptweets':
                tweetCriteria.topTweets = True

            elif opt == '--maxtweets':
                tweetCriteria.maxTweets = int(arg)

            elif opt == '--lang':
                tweetCriteria.lang = arg

            elif opt == '--emoji':
                if arg in [ "ignore", "unicode", "named" ]:
                    tweetCriteria.emoji = arg
                else:
                    raise Exception("Invalid option, --emoji must be one of 'ignore', 'unicode', 'or named'.")

            elif opt == '--output':
                outputFileName = arg
                outputDirNameConcurrent = arg + "_collected"

            elif opt == '--debug':
                debug = True

            elif opt == '--workers':
                workers = int(arg)

            elif opt == '--forcemaxtweets':
                force_max_tweets = True

        if debug:
            print(' '.join(sys.argv))
            print("GetOldTweets3", got.__version__)

        if username_files:
            for uf in username_files:
                if not os.path.isfile(uf):
                    raise Exception("File not found: %s"%uf)
                with open(uf) as f:
                    data = f.read()
                    data = re.sub('(?m)#.*?$', '', data)  # remove comments
                    usernames_ = [u.lstrip('@') for u in re.split(r'[\s,]+', data) if u]
                    usernames_ = [u.lower() for u in usernames_ if u]
                    usernames |= set(usernames_)
                    print("Found %i usernames in %s" % (len(usernames_), uf))

        if usernames:
            if len(usernames) > 1:
                tweetCriteria.username = usernames
                if len(usernames)>20 and tweetCriteria.maxTweets > 0:
                    maxtweets_ = (len(usernames) // 20 + (len(usernames)%20>0)) * tweetCriteria.maxTweets
                    print("Warning: due to multiple username batches `maxtweets' set to %i" % maxtweets_)
            else:
                tweetCriteria.username = usernames.pop()

        if workers > 1:
            if not os.path.exists(outputDirNameConcurrent):
                os.makedirs(outputDirNameConcurrent)
        else:
            outputFile = open(outputFileName, "w+", encoding="utf8")
            outputFile.write('date,username,to,replies,retweets,favorites,text,geo,mentions,hashtags,id,permalink\n')

        cnt = 0

        def receiveBuffer(tweets):
            nonlocal cnt

            last_date = tweets[0].date.strftime("%Y-%m-%d")
            first_date = tweets[-1].date.strftime("%Y-%m-%d")

            file = open(outputDirNameConcurrent + "/" + outputFileNameConcurrent.format(first_date, last_date), "w+", encoding="utf8")
            file.write('date,username,to,replies,retweets,favorites,text,geo,mentions,hashtags,id,permalink\n')

            for t in tweets:
                data_ = [t.date.strftime("%Y-%m-%d %H:%M:%S"),
                         t.username,
                         t.to or '',
                         t.replies,
                         t.retweets,
                         t.favorites,
                         '"' + t.text.replace('"', '""') + '"',
                         t.geo,
                         t.mentions,
                         t.hashtags,
                         t.id,
                         t.permalink]
                data_[:] = [i if isinstance(i, str) else str(i) for i in data_]
                file.write(','.join(data_) + '\n')

            file.flush()
            file.close()
            cnt += len(tweets)

            if sys.stdout.isatty():
                print("\rSaved %i" % cnt, end='', flush=True)
            else:
                print(cnt, end=' ', flush=True)

        print("Downloading tweets...")
        got.manager.ConcurrentTweetManager.getTweets(tweetCriteria, receiveBuffer, debug=debug, worker_count=workers, forceMaxTweets=force_max_tweets)

    except getopt.GetoptError as err:
        print('Arguments parser error, try -h')
        print('\t' + str(err))

    except KeyboardInterrupt:
        print("\r\nInterrupted.\r\n")

    except Exception as err:
        print(traceback.format_exc())
        print(str(err))

    finally:
        if "workers" in locals() and workers > 1:
            concatenate_concurrent_files(outputDirNameConcurrent, outputFileName)
        else:
            if "outputFile" in locals():
                outputFile.close()
                print()
                print('Done. Output file generated "%s".' % outputFileName)


if __name__ == '__main__':
    main(sys.argv[1:])
